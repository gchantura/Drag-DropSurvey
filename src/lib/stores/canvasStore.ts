// src/lib/stores/canvasStore.ts
import { writable, get } from 'svelte/store';

export const DPI = 96; export const CM_PER_INCH = 2.54; export const PIXEL_PER_CM = DPI / CM_PER_INCH; export const PIXEL_PER_INCH = DPI; export const MIN_ZOOM = 0.1; export const MAX_ZOOM = 5; export const ZOOM_SENSITIVITY = 0.001; export const RULER_SIZE = 32; export const SNAP_THRESHOLD = 5;
export const standardSizes = { 'A4 Portrait': { width: Math.round((210 * PIXEL_PER_CM) / 10), height: Math.round((297 * PIXEL_PER_CM) / 10) }, 'A4 Landscape': { width: Math.round((297 * PIXEL_PER_CM) / 10), height: Math.round((210 * PIXEL_PER_CM) / 10) }, 'Letter Portrait': { width: Math.round(8.5 * PIXEL_PER_INCH), height: Math.round(11 * PIXEL_PER_INCH) }, 'Letter Landscape': { width: Math.round(11 * PIXEL_PER_INCH), height: Math.round(8.5 * PIXEL_PER_INCH) }, 'Website (1920x1080)': { width: 1920, height: 1080 }, 'Website Medium (1366x768)': { width: 1366, height: 768 }, 'Square (1080x1080)': { width: 1080, height: 1080 }, 'Presentation (16:9)': { width: 1280, height: 720 }, Custom: { width: 800, height: 1100 } };
export type StandardSizeName = keyof typeof standardSizes;
interface CanvasViewState { width: number; height: number; scale: number; offsetX: number; offsetY: number; }
const initialSizeName: StandardSizeName = 'A4 Portrait'; const initialWidth = standardSizes[initialSizeName]?.width ?? standardSizes.Custom.width; const initialHeight = standardSizes[initialSizeName]?.height ?? standardSizes.Custom.height;
standardSizes.Custom.width = initialWidth; standardSizes.Custom.height = initialHeight;
const { subscribe, update, set } = writable<CanvasViewState>({ width: initialWidth, height: initialHeight, scale: 1, offsetX: 0, offsetY: 0 });
function clampZoom(scale: number): number { return Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, scale)); }
function calculateCenteringOffsets(contentWidth: number, contentHeight: number, viewportWidth: number, viewportHeight: number): { offsetX: number; offsetY: number } { const scaledContentWidth = contentWidth; const scaledContentHeight = contentHeight; const effectiveViewportWidth = viewportWidth - RULER_SIZE; const effectiveViewportHeight = viewportHeight - RULER_SIZE; let offsetX = (effectiveViewportWidth - scaledContentWidth) / 2; let offsetY = (effectiveViewportHeight - scaledContentHeight) / 2; offsetX = Math.min(offsetX, RULER_SIZE); offsetY = Math.min(offsetY, RULER_SIZE); return { offsetX, offsetY }; }
function setCanvasDimensions(width: number, height: number) { update((state) => { standardSizes.Custom.width = Math.max(100, width); standardSizes.Custom.height = Math.max(100, height); return { ...state, width: Math.max(100, width), height: Math.max(100, height) }; }); }
function setCanvasTransform(scale: number, offsetX: number, offsetY: number) { update((state) => ({ ...state, scale: clampZoom(scale), offsetX, offsetY })); }
function setCanvasOffset(offsetX: number, offsetY: number) { update((state) => ({ ...state, offsetX, offsetY })); }
function setCanvasScale(newScale: number) { update((state) => ({ ...state, scale: clampZoom(newScale) })); }
function resetZoom(viewportWidth: number, viewportHeight: number) { update((state) => { const newScale = 1; const contentWidth = state.width * newScale; const contentHeight = state.height * newScale; const { offsetX, offsetY } = calculateCenteringOffsets(contentWidth, contentHeight, viewportWidth, viewportHeight); return { ...state, scale: newScale, offsetX, offsetY }; }); }
function zoomIn() { update((state) => ({ ...state, scale: clampZoom(state.scale + 0.1) })); }
function zoomOut() { update((state) => ({ ...state, scale: clampZoom(state.scale - 0.1) })); }
function adjustZoom(delta: number, centerX: number, centerY: number) { update((state) => { const zoomFactor = Math.exp(delta); const newScale = clampZoom(state.scale * zoomFactor); if (newScale === state.scale) return state; const mouseX_Canvas_PreZoom = (centerX - state.offsetX) / state.scale; const mouseY_Canvas_PreZoom = (centerY - state.offsetY) / state.scale; const newOffsetX = centerX - mouseX_Canvas_PreZoom * newScale; const newOffsetY = centerY - mouseY_Canvas_PreZoom * newScale; return { ...state, scale: newScale, offsetX: newOffsetX, offsetY: newOffsetY }; }); }
export const canvasViewStore = { subscribe, setCanvasDimensions, setCanvasTransform, setCanvasOffset, setCanvasScale, resetZoom, zoomIn, zoomOut, adjustZoom };