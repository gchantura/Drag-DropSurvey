// src/lib/stores/distributionStore.ts
import { derived, get } from 'svelte/store';
import { componentsStore, updateComponent } from '$lib/stores/surveyStore.ts';
import { selectedComponentIds } from './alignmentStore.ts';

export type Distribution = 'horizontal' | 'vertical';
export const canDistribute = derived(selectedComponentIds, ($ids) => $ids.length > 2);
export function distributeSelectedComponents(direction: Distribution): void { const currentSelectedIds = get(selectedComponentIds); const allComponents = get(componentsStore); if (currentSelectedIds.length <= 2) return; const selectedComps = allComponents.filter((c) => currentSelectedIds.includes(c.id)).map((c) => ({ ...c })); if (selectedComps.length <= 2) return; if (direction === 'horizontal') { selectedComps.sort((a, b) => a.x - b.x); const first = selectedComps[0]; const last = selectedComps[selectedComps.length - 1]; const totalRange = last.x + last.width - first.x; const totalWidth = selectedComps.reduce((sum, comp) => sum + comp.width, 0); const totalSpacing = Math.max(0, totalRange - totalWidth); const gap = selectedComps.length > 1 ? totalSpacing / (selectedComps.length - 1) : 0; let currentX = first.x; updateComponent(first.id, { x: Math.round(currentX) }); selectedComps.forEach((comp, index) => { if (index > 0) { currentX += selectedComps[index - 1].width + gap; updateComponent(comp.id, { x: Math.round(currentX) }); } }); } else { selectedComps.sort((a, b) => a.y - b.y); const first = selectedComps[0]; const last = selectedComps[selectedComps.length - 1]; const totalRange = last.y + last.height - first.y; const totalHeight = selectedComps.reduce((sum, comp) => sum + comp.height, 0); const totalSpacing = Math.max(0, totalRange - totalHeight); const gap = selectedComps.length > 1 ? totalSpacing / (selectedComps.length - 1) : 0; let currentY = first.y; updateComponent(first.id, { y: Math.round(currentY) }); selectedComps.forEach((comp, index) => { if (index > 0) { currentY += selectedComps[index - 1].height + gap; updateComponent(comp.id, { y: Math.round(currentY) }); } }); } }
export const distributionActions = { distributeSelectedComponents };